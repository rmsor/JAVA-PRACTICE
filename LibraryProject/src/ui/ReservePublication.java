/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import lib.Book;
import lib.Copy;
import lib.Loan;
import lib.Magazine;
import lib.Member;
import lib.Publication;
import lib.Reservation;

/**
 *
 * @author BISHNU
 */
public class ReservePublication extends javax.swing.JPanel {

    private static ReservePublication instance = null;

    public static ReservePublication getInstance() {

        return instance;
    }

    /**
     * Creates new form LoanCopy
     */
    public ReservePublication() {
        instance = this;
        initComponents();
        listReservationTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public void addValueToCompontents() {
        memberNoComboBox.removeAllItems();
        List<Member> memberList = LibrarySystemApplication.getInstance().getMemberList();
        for (Member mb : memberList) {
            memberNoComboBox.addItem(mb.getMemberNo());
        }
        fillReservationTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        reservePublicationBtn = new javax.swing.JButton();
        reserveStatusDateTF = new javax.swing.JTextField();
        memberNoComboBox = new javax.swing.JComboBox();
        publicationTitleComboBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        listReservationTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        cancelReservationBtn = new javax.swing.JButton();
        pickupReservationBtn = new javax.swing.JButton();

        jLabel1.setText("Member No");

        jLabel3.setText("Publication Title");

        jLabel4.setText("Reservation Date");

        reservePublicationBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        reservePublicationBtn.setForeground(new java.awt.Color(51, 0, 153));
        reservePublicationBtn.setText("Reserve Publication");
        reservePublicationBtn.setActionCommand("Reserve Publication");
        reservePublicationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservePublicationBtnActionPerformed(evt);
            }
        });

        memberNoComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberNoComboBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Choose Type");

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Book", "Magazine" }));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        listReservationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member No.", "Member Name", "Publication Title", "Status", "Reservation Date", "Copy"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(listReservationTable);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Reserved Publications");

        cancelReservationBtn.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        cancelReservationBtn.setForeground(new java.awt.Color(51, 51, 255));
        cancelReservationBtn.setText("Cancel Reservation");
        cancelReservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelReservationBtnActionPerformed(evt);
            }
        });

        pickupReservationBtn.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        pickupReservationBtn.setForeground(new java.awt.Color(51, 51, 255));
        pickupReservationBtn.setText("Pickup Reservation");
        pickupReservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickupReservationBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel6))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reserveStatusDateTF)
                            .addComponent(memberNoComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(publicationTitleComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(typeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(reservePublicationBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                        .addGap(80, 80, 80)
                        .addComponent(cancelReservationBtn)
                        .addGap(98, 98, 98)
                        .addComponent(pickupReservationBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(memberNoComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(publicationTitleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reserveStatusDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(reservePublicationBtn)
                            .addComponent(cancelReservationBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addComponent(pickupReservationBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void reservePublicationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservePublicationBtnActionPerformed
        // TODO add your handling code here:
        String memberNo = memberNoComboBox.getSelectedItem().toString();
        String typePub = typeComboBox.getSelectedItem().toString();
        String pubTitle = publicationTitleComboBox.getSelectedItem().toString();
        String statusDateStr = reserveStatusDateTF.getText();

        if (memberNo.length() == 0 || typePub.length() == 0
                || pubTitle.length() == 0
                || statusDateStr.length() == 0) {
            JOptionPane.showMessageDialog(null, "Please fillup all fields");
            return;
        }
        Date statusDate = null;
        SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
        try {
            statusDate = formatter.parse(statusDateStr);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        Member mb = LibrarySystemApplication.getInstance().searchMemberList(memberNo);

        if (typePub.equalsIgnoreCase("Book")) {
            Book bk = LibrarySystemApplication.getInstance().searchBook(pubTitle);
            Reservation res = mb.reserve(bk, statusDate);
            LibrarySystemApplication.getInstance().getReservationList().add(res);
            JOptionPane.showMessageDialog(null, "Successfully Reserved Book");

        } else if (typePub.equalsIgnoreCase("Magazine")) {
            Magazine mg = LibrarySystemApplication.getInstance().searchMagazine(pubTitle);
            Reservation res = mb.reserve(mg, statusDate);
            LibrarySystemApplication.getInstance().getReservationList().add(res);
            JOptionPane.showMessageDialog(null, "Successfully Reserved Magazine");
        }
        fillReservationTable();
        publicationTitleComboBox.removeAllItems();
        reserveStatusDateTF.setText("");

    }//GEN-LAST:event_reservePublicationBtnActionPerformed
    private void fillReservationTable() {
        DefaultTableModel resModel = (DefaultTableModel) listReservationTable.getModel();
        //String type = "pending";
        resModel.getDataVector().removeAllElements();
        resModel.fireTableDataChanged();
        List<Member> members = LibrarySystemApplication.getInstance().getMemberList();
        for (Member mem : members) {
            for (Reservation res : mem.getReservations()) {
                //if (res.getStatus().equalsIgnoreCase(type)) {
                String pubTit = res.getPub().getTitle();
                String copy = "";
                if (res.getCp() != null) {
                    copy = res.getCp().getCopyNo();
                }
                resModel.addRow(new Object[]{mem.getMemberNo(), mem.getFullName(), pubTit, res.getStatus(), res.getStatusDate(), copy});
                //}
            }
        }
    }
    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        // TODO add your handling code here:

        String typePub = typeComboBox.getSelectedItem().toString();
        publicationTitleComboBox.removeAllItems();
        if (typePub.equalsIgnoreCase("Book")) {
            List<Book> bookList = LibrarySystemApplication.getInstance().getPubBookList();
            for (Book bk : bookList) {
                publicationTitleComboBox.addItem(bk.getTitle());
            }
        } else if (typePub.equalsIgnoreCase("Magazine")) {
            List<Magazine> magazineList = LibrarySystemApplication.getInstance().getPubMagazineList();

            for (Magazine magazine : magazineList) {

                publicationTitleComboBox.addItem(magazine.getTitle());

            }
        }
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void memberNoComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberNoComboBoxActionPerformed
        // TODO add your handling code here:

        typeComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_memberNoComboBoxActionPerformed

    private void cancelReservationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelReservationBtnActionPerformed
        int row = listReservationTable.getSelectedRow();
        if (row >= 0) {
            String memberNo = listReservationTable.getValueAt(row, 0).toString();
            Member mb = LibrarySystemApplication.getInstance().searchMember(memberNo);
            String pubTitle = listReservationTable.getValueAt(row, 2).toString();
            String status = listReservationTable.getValueAt(row, 3).toString();
            Reservation res = LibrarySystemApplication.getInstance().searchReservationList(status, mb, pubTitle);
            mb.cancelReservation(res);
            //LibrarySystemApplication.getInstance().getReservationList().remove(res);
            JOptionPane.showMessageDialog(null, "Reservation Cancelled Successfully");
            fillReservationTable();
        } else {
            JOptionPane.showMessageDialog(null, "No Rows Selected");
        }

    }//GEN-LAST:event_cancelReservationBtnActionPerformed

    private void pickupReservationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickupReservationBtnActionPerformed
        // TODO add your handling code here:
        int row = listReservationTable.getSelectedRow();        
        if (row >= 0) {
            String status = listReservationTable.getValueAt(row, 3).toString();
            if (status.equalsIgnoreCase("onhold")) {
                String memberNo = listReservationTable.getValueAt(row, 0).toString();
                Member mb = LibrarySystemApplication.getInstance().searchMember(memberNo);
                String pubTitle = listReservationTable.getValueAt(row, 2).toString();
                Reservation res = LibrarySystemApplication.getInstance().searchReservationList(status, mb, pubTitle);
                mb.pickupReservation(res);
                //LibrarySystemApplication.getInstance().getReservationList().remove(res);
                JOptionPane.showMessageDialog(null, "Reservation Picked Successfully");
                fillReservationTable();
            } else {
                JOptionPane.showMessageDialog(null, "No copy assigned to reservation. it is in pending state");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No Rows Selected");
        }
    }//GEN-LAST:event_pickupReservationBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelReservationBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable listReservationTable;
    private javax.swing.JComboBox memberNoComboBox;
    private javax.swing.JButton pickupReservationBtn;
    private javax.swing.JComboBox publicationTitleComboBox;
    private javax.swing.JButton reservePublicationBtn;
    private javax.swing.JTextField reserveStatusDateTF;
    private javax.swing.JComboBox typeComboBox;
    // End of variables declaration//GEN-END:variables
}
