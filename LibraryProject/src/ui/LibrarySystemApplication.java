package ui;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import lib.Book;
import lib.Copy;
import lib.Magazine;
import lib.Member;
import lib.Reservation;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 984316
 */
public class LibrarySystemApplication extends javax.swing.JFrame {

    private static Dimension dimension;

    AddPublication addPublication;
    AddCopyPublication addCopyPublication;
    CreateMember createMember;
    LoanPublication loanPub;
    ReturnPublication returnPub;
    ReservePublication reservePub;

    //For Store Publication Value
    private List<Book> pubBookList = new ArrayList<Book>();
    private List<Magazine> pubMagazineList = new ArrayList<Magazine>();
    private List<Copy> copyBookList = new ArrayList<Copy>();
    private List<Copy> copyMagazineList = new ArrayList<Copy>();
    private List<Member> memberList = new ArrayList<Member>();
    private List<Reservation> reservationList = new ArrayList<Reservation>();

    
    private static LibrarySystemApplication instance = null;

    public static LibrarySystemApplication getInstance() {

        return instance;
    }

    public static void centreWindow(Window frame) {

        int x = (int) ((dimension.getWidth() - frame.getWidth()) / 2);
        int y = (int) ((dimension.getHeight() - frame.getHeight()) / 2);
        frame.setLocation(x, y);
    }

    /**
     * Creates new form LibrarySystemApplication
     */
    protected LibrarySystemApplication() {
        super("Library Management System");
        dimension = Toolkit.getDefaultToolkit().getScreenSize();
        initComponents();

        addPublication = new AddPublication();
        JScrollPane scrollPanePublication = new JScrollPane(addPublication);
        scrollPanePublication.setHorizontalScrollBar(null);
        addTab("Add Publication", scrollPanePublication);

        addCopyPublication = new AddCopyPublication();
        addTab("Add Copy", addCopyPublication);

        createMember = new CreateMember();
        addTab("Create Member", createMember);

        loanPub = new LoanPublication();
        addTab("Loan Publication", loanPub);
        
        returnPub = new ReturnPublication();
        addTab("Return Publication", returnPub);

        reservePub = new ReservePublication();
        addTab("Reserve/Cancel/Pickup Publication", reservePub);

        topBarTabbedPane.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                int index = topBarTabbedPane.getSelectedIndex();
                switch (index) {
                    case 1:
                        AddCopyPublication.getInstance().addValueToCompontents();
                        break;
                    case 3:
                        LoanPublication.getInstance().addValueToCompontents();
                        break;
                    case 4:
                        ReturnPublication.getInstance().addValueToCompontents();
                        break;
                    case 5:
                        ReservePublication.getInstance().addValueToCompontents();
                        break;
                }
            }
        });

    }

    private void addTab(String title, Component comp) {
        topBarTabbedPane.add(title, comp);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topBarTabbedPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topBarTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topBarTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibrarySystemApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibrarySystemApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibrarySystemApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibrarySystemApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LibrarySystemApplication librarySystem = new LibrarySystemApplication();
                instance = librarySystem;
                //instance.setExtendedState(JFrame.MAXIMIZED_BOTH);
                instance.setVisible(true);
                instance.setSize(1000,900);
                instance.setLocation(350, 50);

            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane topBarTabbedPane;
    // End of variables declaration//GEN-END:variables
    
    public List<Member> getMemberList() {
        return memberList;
    }

    public void setMemberList(List<Member> memberList) {
        this.memberList = memberList;
    }

    public List<Copy> getCopyBookList() {
        return copyBookList;
    }

    public void setCopyBookList(List<Copy> copyBookList) {
        this.copyBookList = copyBookList;
    }
    public Book searchBook(String title){
        Iterator it=this.pubBookList.iterator();
        while(it.hasNext()){
            Book bk=(Book)it.next();
            if(bk.getTitle().equals(title)){
                return bk;
            }
        }
        return null;
    }
    public Copy searchBookCopy(String title,String copyNo){
        Iterator it=this.copyBookList.iterator();
        while(it.hasNext()){
            Copy bk=(Copy)it.next();
            if(bk.getPublication().getTitle().equals(title) && bk.getCopyNo().equals(copyNo)){
                return bk;
            }
        }
        return null;
    }
    public Member searchMemberList(String memberNo){
        Iterator it=this.memberList.iterator();
        while(it.hasNext()){
            Member bk=(Member)it.next();
            if(bk.getMemberNo().equals(memberNo)){
                return bk;
            }
        }
        return null;
    }
    public Magazine searchMagazine(String title){
        Iterator it=this.pubMagazineList.iterator();
        while(it.hasNext()){
            Magazine bk=(Magazine)it.next();
            if(bk.getTitle().equals(title)){
                return bk;
            }
        }
        return null;
    }
    public Copy searchMagazineCopy(String title,String copyNo){
        Iterator it=this.copyMagazineList.iterator();
        while(it.hasNext()){
            Copy bk=(Copy)it.next();
            if(bk.getPublication().getTitle().equals(title) && bk.getCopyNo().equals(copyNo)){
                return bk;
            }
        }
        return null;
    }
    public Member searchMember(String memberNo){
        Iterator it=this.memberList.iterator();
        while(it.hasNext()){
            Member bk=(Member)it.next();
            if(bk.getMemberNo().equals(memberNo)){
                return bk;
            }
        }
        return null;
    }
    public Reservation searchReservationList(String status,Member mb,String pubTitle){
        Iterator it=this.reservationList.iterator();
        while(it.hasNext()){
            Reservation res=(Reservation)it.next();
            if(res.getStatus().equals(status) && res.getPub().getTitle().equals(pubTitle) && res.getMb().equals(mb)){
                return res;
            }
        }
        return null;
    }
    public List<Copy> getCopyMagazineList() {
        return copyMagazineList;
    }

    public void setCopyMagazineList(List<Copy> copyMagazineList) {
        this.copyMagazineList = copyMagazineList;
    }

    /**
     * @return the pubBookList
     */
    public List<Book> getPubBookList() {
        return pubBookList;
    }

    /**
     * @param pubBookList the pubBookList to set
     */
    public void setPubBookList(List<Book> pubBookList) {
        this.pubBookList = pubBookList;
    }

    /**
     * @return the pubMagazineList
     */
    public List<Magazine> getPubMagazineList() {
        return pubMagazineList;
    }

    /**
     * @param pubMagazineList the pubMagazineList to set
     */
    public void setPubMagazineList(List<Magazine> pubMagazineList) {
        this.pubMagazineList = pubMagazineList;
    }

    /**
     * @return the reservationList
     */
    public List<Reservation> getReservationList() {
        return reservationList;
    }

    /**
     * @param reservationList the reservationList to set
     */
    public void setReservationList(List<Reservation> reservationList) {
        this.reservationList = reservationList;
    }
}
